import streamlit as st
import pandas as pd

# Define your categories list
categories_list = [
    'money laundering', 'fraud', 'cybercrime', 'identity theft', 
    'tax evasion', 'insider trading', 'market manipulation',
    'embezzlement', 'bribery', 'corruption', 'counterfeiting',
    'sanctions violation', 'terrorist financing', 'pyramid scheme',
    'data breach'
]

def initialize_data():
    """Initialize the session state if it doesn't exist"""
    # Create columns list with fixed fields and all categories
    columns = ['entity'] + categories_list + ['summary']
    if 'data' not in st.session_state:
        st.session_state.data = pd.DataFrame(columns=columns)

def add_data(entity, category_values, summary):
    """Add a new row to the dataframe"""
    # Create a dictionary with all data
    new_data = {'entity': [entity], 'summary': [summary]}
    # Add all category values
    for category, value in category_values.items():
        new_data[category] = [value]
    
    new_row = pd.DataFrame(new_data)
    st.session_state.data = pd.concat([st.session_state.data, new_row], ignore_index=True)

def main():
    st.title("Data Entry Form")
    
    # Initialize the data
    initialize_data()
    
    # Create the input form
    with st.form("data_entry_form"):
        # Text input for entity
        entity = st.text_input("Entity Name")
        
        # Create checkbox inputs for categories
        st.subheader("Categories")
        
        # Calculate number of columns needed (3 columns layout)
        num_cols = 3
        cols = st.columns(num_cols)
        
        # Dictionary to store category values
        category_values = {}
        
        # Distribute categories across columns
        for i, category in enumerate(categories_list):
            with cols[i % num_cols]:
                # Convert category to display format (capitalize words)
                display_name = ' '.join(word.capitalize() for word in category.split('_'))
                category_values[category] = st.checkbox(display_name)
        
        # Text area for summary
        st.subheader("Summary")
        summary = st.text_area("Enter additional details", height=100)
        
        # Submit button
        submitted = st.form_submit_button("Add Entry")
        
        if submitted:
            if entity.strip():  # Check if entity is not empty
                add_data(entity, category_values, summary)
                st.success("Data added successfully!")
            else:
                st.error("Please enter an entity name")
    
    # Display the current data
    st.subheader("Current Data")
    
    # Configure the display of the dataframe
    if not st.session_state.data.empty:
        # Configure column display properties
        column_config = {
            "entity": st.column_config.TextColumn(
                "Entity",
                width="medium"
            ),
            "summary": st.column_config.TextColumn(
                "Summary",
                width="medium",
                help="Entity summary and additional notes"
            )
        }
        
        # Add configurations for category columns
        for category in categories_list:
            display_name = ' '.join(word.capitalize() for word in category.split('_'))
            column_config[category] = st.column_config.CheckboxColumn(
                display_name,
                help=f"Indicates if {display_name} is applicable",
                width="small"
            )
        
        st.dataframe(
            st.session_state.data,
            column_config=column_config,
            hide_index=True
        )
    
    # Add download button
    if not st.session_state.data.empty:
        csv = st.session_state.data.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="Download data as CSV",
            data=csv,
            file_name="data.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()
